import testUsers from '@ciscospark/test-helper-test-users';
import {assert} from 'chai';

describe(`samples/browser-auth-implicit`, () => {
  describe(`authenticate using implicit grant flow`, () => {
    const browserSpock = browser.select(`browserSpock`);
    let spock;

    before(`creates spock`, () => testUsers.create({count: 1, config: {displayName: `Spock`}})
      .then((users) => {
        [spock] = users;
      }));

    // the inner-most function is executed in the window environment
    // eslint-disable-next-line no-undef
    before(() => browser.execute(() => window.reload));

    step(`browses to sample app and verifies the user is not authenticated`, () => {
      browserSpock.url(`/packages/node_modules/samples/browser-auth-implicit`);
      assert.equal(browserSpock.getText(`#authentication-status`), `Not Authenticated`);
    });

    step(`initiates implicit grant authentication flow`, () => {
      browserSpock.click(`[title="authenticate"]`);
    });

    step(`enters user login information`, () => {
      // the login pages aren't known for their consistency, so we'll break with
      // out pattern of using accessibility labels for test selectors in favor
      // of using the well known (if not a11y helpful) ids.
      browserSpock.waitForExist(`#IDToken1`);

      // Enter Email if we haven't already filled it in
      if (!browserSpock.isVisible(`#IDToken1[readonly]`)) {
        browserSpock.setValue(`#IDToken1`, spock.email);
        browserSpock.click(`#IDButton2`);
      }
      for (let i = 0; i < 3; i++) {
        console.log(`password entry attempt #${i}`);
        browserSpock.waitForExist(`#IDToken2`);


        browserSpock.setValue(`#IDToken2`, spock.password);
        browserSpock.click(`#Button1`);

        if (!browserSpock.isVisible(`.generic-error`)) {
          break;
        }
      }

      // I feel like there's a better way to do this...
      if (browserSpock.isVisible(`.generic-error`)) {
        throw new Error(`Failed to login after several attempts`);
      }
    });

    step(`verifies authentication was successfull`, () => {
      browserSpock.waitUntil(() => browserSpock.getTitle() === `Authentication - Implicit Grant Flow`);
      assert.equal(browserSpock.getText(`#authentication-status`), `Authenticated`);
      assert.equal(browserSpock.getAttribute(`[title="logout"]`, `value`), `logout`);
    });

    step(`logs out`, () => {
      browserSpock.click(`[title="logout"]`);
      browserSpock.waitUntil(() => browserSpock.getTitle() === `Authentication - Implicit Grant Flow`);
      assert.equal(browserSpock.getText(`#authentication-status`), `Not Authenticated`);
    });
  });
});
