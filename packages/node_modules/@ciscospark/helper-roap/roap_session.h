/*
 * Copyright 2015 Cisco Systems Inc.
 */

#ifndef ROAP_SESSION_H
#define ROAP_SESSION_H

#include <memory>
#include <boost/asio/steady_timer.hpp>
#include <boost/random/mersenne_twister.hpp>
#include <boost/random/uniform_int.hpp>

#include "roap_session_base.h"
#include "thread_context.h"

namespace ROAP {

    /**
     * Class implementing a ROAP session, ROAP message
     * processing/generating, and a ROAP state machine.
     */
    class RoapSession : public RoapSessionBase, public std::enable_shared_from_this<RoapSession> {
    public:
        /**
         * Create a ROAP session shared pointer
         *
         * @param sessionID the local session id
         * @param context the thread context in which to run
         */
        static std::shared_ptr<RoapSession> create(const std::string& sessionID, CTMS::CThreadContext& context);

        /**
         * Create a ROAP session shared pointer with a starting sequence number
         *
         * @param sessionID the local session id
         * @param seq the sequence number
         * @param context the thread context in which to run
         */
        static std::shared_ptr<RoapSession> create(const std::string& sessionID,
                                                   uint32_t seq,
                                                   CTMS::CThreadContext& context);

        /**
         * Virtual destruct
         */
        virtual ~RoapSession();

        /**
         * @see RoapSessionBase::receive
         */
        virtual void receive(const RoapMessage& message);

        /**
         * @see RoapSessionBase::transmitOfferRequest
         */
        virtual int transmitOfferRequest(const boost::optional<std::vector<std::string>>& headers);

        /**
         * @see RoapSessionBase::transmitOffer
         */
        virtual int transmitOffer(const std::vector<std::string>& sdps, const boost::optional<std::vector<std::string>>& headers);

        /**
         * @see RoapSessionBase::transmitAnswer
         */
        virtual int transmitAnswer(const std::vector<std::string>& sdps, const boost::optional<std::vector<std::string>>& headers);

        /**
         * @see RoapSessionBase::transmitOk
         */
        virtual int transmitOk();

        /**
         * @see RoapSessionBase::transmitError
         */
        virtual int transmitError(const std::string& errorCause);

        /**
         * @see RoapSessionBase::registerCallbacks
         */
        virtual void registerCallbacks(const RoapSessionCallbacks& callbacks);

        /**
         * @see RoapSessionBase::getState
         */
        virtual RoapState getState() const;

        /**
         * @see RoapSessionBase::getVersion
         */
        virtual const std::string& getVersion() const;

        /**
         * @see RoapSessionBase::getCurrentSeq
         */
        virtual uint32_t getCurrentSeq() const;

        /**
         * @see RoapSessionBase::setVersion
         */
        virtual int setVersion(const std::string& version);

        /**
         * @see RoapSessionBase::isTransactionInProgress
         */
        virtual bool isTransactionInProgress() const;

        /**
         * @see RoapSessionBase::getLastReceiveMessage
         */
        virtual const boost::optional<RoapMessage>& getLastReceiveMessage() const;

        /**
         * @see RoapSessionBase::getReceiveStats
         */
        virtual const roap_message_stats& getReceiveStats() const;

        /**
         * @see RoapSessionBase::getTransmitStats
         */
        virtual const roap_message_stats& getTransmitStats() const;

        /**
         * @see RoapSessionBase::setRetransmitDuration
         */
        virtual void setRetransmitDuration(const std::chrono::steady_clock::duration& duration);

        /**
         * @see RoapSessionBase::setTransactionTimeoutDuration
         */
        virtual void setTransactionTimeoutDuration(const std::chrono::steady_clock::duration& duration);

        /**
         * @see RoapSessionBase::setSuspensionState
         */
        virtual void setSuspensionState(bool suspended);

        /**
         * @see RoapSessionBase::isSuspended
         */
        virtual bool isSuspended();

    protected:
        /**
         * Construct a ROAP session with a starting sequence number
         * @see RoapSession::create
         */
        RoapSession(const std::string& sessionID, uint32_t seq, CTMS::CThreadContext& context);

        /**
         * Helper method to receive an offer request message
         * @param message the received message
         */
        void receiveOfferRequest(const RoapMessage& message);

        /**
         * Helper method to receive an offer message
         * @param message the received message
         */
        void receiveOffer(const RoapMessage& message);

        /**
         * Helper method to receive an offer response message
         * @param message the received message
         */
        void receiveOfferResponse(const RoapMessage& message);

        /**
         * Helper method to receive an answer message
         * @param message the received message
         */
        void receiveAnswer(const RoapMessage& message);

        /**
         * Helper method to receive an ok message
         * @param message the received message
         */
        void receiveOk(const RoapMessage& message);

        /**
         * Helper method to receive an error message
         * @param message the received message
         */
        void receiveError(const RoapMessage& message);

        /**
         * Transmit an out of order error message
         * @param source the out of order message
         * @param expectedNew whether we expected a new seq or not
         */
        void transmitOOOErrorMessage(const RoapMessage& source, bool expectedNew);

        /**
         * Transmit a conflict error message
         * @param source the out of order message
         * @param last our last sent message
         */
        void transmitConflictErrorMessage(const RoapMessage& source, const RoapMessage& last);

        /**
         * Transmit a double conflict error message
         * @param source the out of order message
         * @param last our last sent message
         */
        void transmitDoubleConflictErrorMessage(const RoapMessage& source, const RoapMessage& last);

        /**
         * Transmit an invalid state error message
         * @param source the out of order message
         */
        void transmitInvalidStateErrorMessage(const RoapMessage& source);

        /**
         * Helper method to transmit an error message based on the
         * given source message with the given error type.
         *
         * @param source the received message
         * @param errorType the error type
         * @param errorCause the cause of the error
         */
        void transmitErrorMessage(const RoapMessage& source, const std::string& errorType, const std::string& errorCause);

        /**
         * Helper method to transmit the given message based on the
         * given source message.
         *
         * @param source the received message
         * @param rm the message to be sent
         */
        void transmitMessage(const RoapMessage& source, RoapMessage& rm);

        /**
         * Helper method to transmit the given message
         * @param rm the message to be transmitted
         */
        void transmitMessage(RoapMessage& rm);

        /**
         * Helper method to validate the version in the given message
         * @return true if the version is valid, false otherwise
         */
        bool validateVersion(const RoapMessage& message);

        /**
         * Helper method to validate the session ids in the given message
         * @return true if the session ids are valid, false otherwise
         */
        bool validateSessionIDs(const RoapMessage& message);

        /**
         * Helper method to change state from the current state to the
         * given state
         * @param state the new state
         */
        void changeState(RoapState state);

        /**
         * Helper method to generate the random tieBreaker value
         * @return random tieBreaker
         */
        uint32_t generateTieBreaker();

        /**
         * Helper method invoked whenever we start a new transaction
         */
        void startNewTransaction(bool isLocal);

        /**
         * Helper method to schedule our retransmission timer
         */
        void scheduleRetransmitTimer();

        /**
         * Helper method to process a retransmission timer tick
         */
        void processRetransmitTimer();

        /**
         * Helper method to schedule signalling timeout timer
         */
        void scheduleTransactionTimeoutTimer();

        /**
         * Helper method to process a signalling timeout timer
         */
        void processTransactionTimeoutTimer();

        // our current state
        RoapState mState;

        // our current version
        std::string mVersion;

        // last used sequence number
        uint32_t mLastSeq;

        // response token from the last offer request message received
        boost::optional<std::string> mRemoteOfferRequestResponseToken;

        // response token from the last offer message received
        boost::optional<std::string>  mRemoteOfferResponseToken;

        // response token from the last answer message received
        boost::optional<std::string>  mRemoteAnswerResponseToken;

        // our local session id
        boost::optional<std::string> mLocalSessionID;

        // our remote session id
        boost::optional<std::string> mRemoteSessionID;

        // our remote session token
        boost::optional<std::string> mRemoteSessionToken;

        // the last message we received
        boost::optional<RoapMessage> mLastReceiveMessage;

        // the last offer request message we sent
        boost::optional<RoapMessage> mLastTransmitOfferRequest;

        // the last offer message we sent
        boost::optional<RoapMessage> mLastTransmitOffer;

        // the last answer message we sent
        boost::optional<RoapMessage> mLastTransmitAnswer;

        // the last ok message we sent
        boost::optional<RoapMessage> mLastTransmitOk;

        // our callbacks
        RoapSessionCallbacks mCallbacks;

        // random number generator
        boost::mt19937 mRNG;
        boost::uniform_int<uint32_t> mUniformDist;

        // timer stuff
        boost::asio::steady_timer mRetransmitTimer;
        std::chrono::steady_clock::duration mRetransmitDuration;

        boost::asio::steady_timer mTransactionTimeoutTimer;
        std::chrono::steady_clock::duration mTransactionTimeoutDuration;

        // our thread context
        CTMS::CThreadContext& mContext;

        // our stats
        roap_message_stats mReceiveStats;
        roap_message_stats mTransmitStats;

        // suspension state
        bool mSuspended;
    };
}

#endif
