/* eslint-env browser */
/* global ciscospark */
/* eslint-disable camelcase */
/* eslint-disable max-nested-callbacks */
/* eslint-disable no-alert */
/* eslint-disable no-console */
/* eslint-disable require-jsdoc */

// Declare some globals that we'll need throughout
let activeCall, spark;

// First, let's wire our form fields up to localStorage so we don't have to
// retype things everytime we reload the page

[
  'access-token',
  'invitee'
].forEach((id) => {
  const el = document.getElementById(id);
  el.value = localStorage.getItem(id);
  el.addEventListener('change', (event) => {
    localStorage.setItem(id, event.target.value);
  });
});

// There's a few different events that'll let us know we should initialize
// CiscoSpark and start listening for incoming calls, so we'll wrap a few things
// up in a function.
function connect() {
  if (!spark) {
    spark = ciscospark.init({
      config: {
        phone: {
          // Turn on group calling; there's a few minor breaking changes with
          // regards to how single-party calling works (hence, the opt-in), but
          // this is how things are going to work in 2.0 and if you plan on
          // doing any group calls, you'll need this turned on for your entire
          // app anyway.
          enableExperimentalGroupCallingSupport: true
        }
      },
      credentials: {
        access_token: document.getElementById('access-token').value
      }
    });
  }

  if (!spark.phone.registered) {
    return spark.phone.register()
      .then(() => {
        // This is just a little helper for our selenium tests and doesn't
        // really matter for the example
        document.body.classList.add('listening');
      })
      // This is a terrible way to handle errors, but anything more specific is
      // going to depend a lot on your app
      .catch((err) => {
        console.error(err);
        alert(err);
        // we'll rethrow here since we didn't really *handle* the error, we just
        // reported it
        throw err;
      });
  }

  return Promise.resolve();
}

// Similarly, there are a few different ways we'll get a call Object, so let's
// put call handling inside its own function.
function bindCallEvents(call) {
  activeCall = call;
  // call is a call instance, not a promise, so to know if things break,
  // we'll need to listen for the error event. Again, this is a rather naive
  // handler.
  call.on('error', (err) => {
    console.error(err);
    alert(err);
  });

  // We can start rendering the local stream before the call is officially
  // connected but not right when it's dialed, so we'll need to list for the
  // the streams to become available. We'll use `.once` instead of `.on`
  // because those streams will not change for the duration of the call and it's
  // one less event handler to worry about later.

  call.once('localScreenShare:change', () => {
    document.getElementById('self-screen').srcObject = call.localScreenShare;
  });

  // Once the call ends, we'll want to clean up our UI a bit
  call.on('inactive', () => {
    // Remove the streams from the UI elements
    document.getElementById('self-screen').srcObject = undefined;
    activeCall = undefined;
  });
}

// We're relying on the share-application and share-screen buttons to initiate,
// so this is just here to make the enter key doesn't do anything
document.getElementById('dialer').addEventListener('submit', (event) => {
  // again, we don't want to reload when we try to dial
  event.preventDefault();
});

document.getElementById('end').addEventListener('click', () => {
  console.log('ending call');
  if (activeCall) {
    console.log('ending call');
    activeCall.hangup()
      .then(() => {
        console.log('ended call');
      })
      .catch((err) => {
        console.error(err);
      });
  }
});

document.getElementById('share-application').addEventListener('click', () => {
  if (activeCall) {
    activeCall.startApplicationShare();
  }
  else {
    connect()
      .then(() => {
        const call = spark.phone.share(document.getElementById('invitee').value);
        // Call our helper function for binding events to calls
        bindCallEvents(call);
      });
  }
});

document.getElementById('share-screen').addEventListener('click', () => {
  if (activeCall) {
    activeCall.startScreenShare();
  }
  else {
    connect()
      .then(() => {
        const call = spark.phone.share(document.getElementById('invitee').value, {
          constraint: {
            mediaSource: 'screen'
          }
        });
        // Call our helper function for binding events to calls
        bindCallEvents(call);
      });
  }
});
