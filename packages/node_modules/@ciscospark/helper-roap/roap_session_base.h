/*
 * Copyright 2015 Cisco Systems Inc.
 */

#ifndef ROAP_SESSION_BASE_H
#define ROAP_SESSION_BASE_H

#include <map>
#include <functional>
#include <chrono>

#include "roap_state.h"
#include "roap_message.h"

namespace ROAP {

    /**
     * Structure holding callback objects used by the state machine to
     * take actions.
     */
    struct RoapSessionCallbacks {
        /**
         * Callback requesting that the given message be transmitted
         * to the remote side.
         */
        std::function<void (const RoapMessage&)> mTransmitCallback;

        /**
         * Callback requesting that the given string be logged.
         */
        std::function<void (const std::string&)> mLogCallback;

        /**
         * Callback informing that a ROAP offer request has been
         * received and the local side should send an offer.
         */
        std::function<void ()> mReceiveOfferRequestCallback;

        /**
         * Callback informing that a ROAP offer has been received and
         * the local side should send an answer.
         */
        std::function<void (const std::vector<std::string>&)> mReceiveOfferCallback;

        /**
         * Callback informing that a ROAP answer has been received and
         * providing the SDPs from the answer message.
         */
        std::function<void (const std::vector<std::string>&)> mReceiveAnswerCallback;

        /**
         * Callback informing that a ROAP ok has been received
         */
        std::function<void ()> mReceiveOkCallback;

        /**
         * Callback informing that a ROAP error has been received
         */
        std::function<void ()> mReceiveErrorCallback;

        /**
         * Callback informing that a ROAP transaction has been timed out
         */
        std::function<void ()> mTransactionTimeoutCallback;
    };

    /**
     * Typedef of object used to hold ROAP message rx/tx stats.  A map
     * of message name to a counter.
     */
    typedef std::map<std::string, uint64_t> roap_message_stats;

    /**
     * Class defining the interface for a ROAP session.  A ROAP
     * session implements ROAP message processing, message generation,
     * and the ROAP state machine.
     */
    class RoapSessionBase {
    public:
        /**
         * Construct a ROAP session base
         */
        RoapSessionBase() {}

        /**
         * Virtual destructor
         */
        virtual ~RoapSessionBase() {}

        /**
         * Receive and process the given ROAP message
         *
         * @param message the ROAP message
         */
        virtual void receive(const RoapMessage& message) = 0;

        /**
         * Transmit an offer request to the remote peer
         * @param headers optional vector of signaling headers
         * @return 0 on success, -1 on error
         */
        virtual int transmitOfferRequest(const boost::optional<std::vector<std::string>>& headers) = 0;

        /**
         * Transmit an offer to the remote peer
         * @param sdps the sdps to place in the offer
         * @param headers optional vector of signaling headers
         * @return 0 on success, -1 on error
         */
        virtual int transmitOffer(const std::vector<std::string>& sdps, const boost::optional<std::vector<std::string>>& headers) = 0;

        /**
         * Transmit an answer to the remote peer
         * @param sdps the sdps to place in the offer
         * @param headers optional vector of signaling headers
         * @return 0 on success, -1 on error
         */
        virtual int transmitAnswer(const std::vector<std::string>& sdps, const boost::optional<std::vector<std::string>>& headers) = 0;

        /**
         * Transmit an ok to the remote peer
         * @reutrn 0 on success, -1 on error
         */
        virtual int transmitOk() = 0;

        /**
         * Transmit an error to the remote peer
         * @param errorCause string describing the cause of the error
         * @reutrn 0 on success, -1 on error
         */
        virtual int transmitError(const std::string& errorCause) = 0;

        /**
         * Register the session callbacks
         * @param callbacks the callbacks
         */
        virtual void registerCallbacks(const RoapSessionCallbacks& callbacks) = 0;

        /**
         * Get the current state of this ROAP session
         * @return the current state of this ROAP session
         */
        virtual RoapState getState() const = 0;

        /**
         * Get the current version of this ROAP session
         * @return the current version of this ROAP session
         */
        virtual const std::string& getVersion() const = 0;

        /**
         * Get the current sequence number of this ROAP session
         * @return the current sequence number of this ROAP session
         */
        virtual uint32_t getCurrentSeq() const = 0;

        /**
         * Set the version of this ROAP session
         * @param version the new version of this session
         * @return 0 on success, -1 on error
         */
        virtual int setVersion(const std::string& version) = 0;

        /**
         * Is a transaction in progress in this ROAP session
         * @return true if a transaction is in progress
         */
        virtual bool isTransactionInProgress() const = 0;

        /**
         * Get the last valid received message in this ROAP session
         * @return last valid received message
         */
        virtual const boost::optional<RoapMessage>& getLastReceiveMessage() const = 0;

        /**
         * Get the receive message stats
         * @return the receive message stats
         */
        virtual const roap_message_stats& getReceiveStats() const = 0;

        /**
         * Get the transmit message stats
         * @return the transmit message stats
         */
        virtual const roap_message_stats& getTransmitStats() const = 0;

        /**
         * Set the duration between retransmissions of ROAP messages
         * @param duration the duration between retransmissions of ROAP messages
         */
        virtual void setRetransmitDuration(const std::chrono::steady_clock::duration& duration) = 0;

        /**
         * Set the timeout duration for waiting for a transaction to finish
         * Once this is reached, an error will be fired
         * @param duration the timeout duration
         */
        virtual void setTransactionTimeoutDuration(const std::chrono::steady_clock::duration& duration) = 0;

        /**
         * Suspend/resume operation on this session
         */
        virtual void setSuspensionState(bool suspended) = 0;

        /**
         * Get suspension state of this session
         */
        virtual bool isSuspended() = 0;
    };
}

#endif
