/*!
 * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.
 */

/* eslint max-nested-callbacks: [0] */

import 'webrtc-adapter';
import transform from 'sdp-transform';
import {curry, defaults, find} from 'lodash';
import {tap} from '@ciscospark/common';

/**
* Converts a pair of booleans to a SDP direction string
* @param {boolean} send
* @param {boolean} recv
* @protected
* @returns {string}
*/
export function boolToDirection(send, recv) {
  if (send && recv) {
    return `sendrecv`;
  }

  if (send) {
    return `sendonly`;
  }

  if (recv) {
    return `recvonly`;
  }

  return `inactive`;
}

/**
 * Adds a bandwith limit line to the sdp; without this line, calling fails
 * @param {Object} bandwidthLimit
 * @param {string} sdp SDP
 * @private
 * @returns {string} The modified SDP
 */
function limitBandwith({audioBandwidthLimit, videoBandwidthLimit}, sdp) {
  return sdp.split(`\r\n`).reduce((lines, line) => {
    lines.push(line);
    if (line.startsWith(`m=`)) {
      lines.push(`b=TIAS:${line.includes(`audio`) ? audioBandwidthLimit : videoBandwidthLimit}`);
    }
    return lines;
  }, []).join(`\r\n`);
}

/**
 * Ends all streams for the specified RTCPeerConnection
 * @param {RTCPeerConnection} pc The RTCPeerConnection for which to end all
 * streams
 * @private
 * @returns {undefined}
 */
function endAllStreams(pc) {
  // FIXME
  pc.getLocalStreams().forEach(stopStream);
  pc.getRemoteStreams().forEach(stopStream);
}

/**
 * Stops the specified stream's tracks and the stream (depending on browser
 * capabilities)
 * @param {MediaStream} stream The MediaStream to stop
 * @private
 * @returns {undefined}
 */
function stopStream(stream) {
  // FIXME
  // need to reattach any removed tracks (even if they're stopped) to make sure
  // the camera gets turned off.
  if (stream.getTracks) {
    stream.getTracks().forEach((track) => track.stop());
  }

  if (stream.stop) {
    stream.stop();
  }
}

/**
 * Wrapper around navigator.mediaDevices.getUserMedia()
 * @param {MediaStreamConstraints} constraints if NODE_ENV is `test`, will
 * automatically add `{fake: true}`. If this is problematic for your use case,
 * you'll need to explicitly include `{fake: false}`
 * @private
 * @returns {Promise<MediaStream>} The resultant MediaStream
 */
export function getUserMedia(constraints) {
  defaults(constraints, {fake: process.env.NODE_ENV === `test`});
  return navigator.mediaDevices.getUserMedia(constraints);
}

/**
 * Creates an offer sdp based on the state of the specified RTCPeerConnection and
 * offer options
 * @param {RTCPeerConnection} pc
 * @param { RTCOfferOptions} offerOptions
 * @param {Object} bandwidthLimit
 * @private
 * @returns {Promise<string>} Resolves with the offer sdp
 */
export const createOffer = curry((pc, offerOptions, bandwithLimit) => {
  offerOptions = offerOptions || {};
  defaults(offerOptions, {
    offerToReceiveVideo: true,
    offerToReceiveAudio: true
  });

  const promise = new Promise((resolve) => {
    pc.onicecandidate = (event) => {
      if (!event.candidate) {
        pc.onicecandidate = undefined;
        resolve();
      }
    };

    // FIXME
    // Note: this timeout really shouldn't exist at all. There's a pending PR
    // some additional work to remove it entirely
    setTimeout(() => {
      pc.onicecandidate = undefined;
      resolve();
    }, 1500);

  });

  return pc.createOffer(offerOptions)
    .then(tap((offer) => {offer.sdp = limitBandwith(bandwithLimit, offer.sdp);}))
    .then(tap((offer) => {
      if (process.env.LOG_SDP) {
        // eslint-disable-next-line no-console
        console.info(`offer`, offer.sdp);
      }
    }))
    .then((offer) => pc.setLocalDescription(offer))
    .then(() => Promise.resolve(promise))
    // Apparently chrome somehow moves the bandwith limit out of the video
    // section, so we need to reapply it.
    .then(() => limitBandwith(bandwithLimit, pc.localDescription.sdp));
});

/**
 * Applies an incoming answer sdp to the specified RTCPeerConnection
 * @param {RTCPeerConnection} pc
 * @param {string} sdp
 * @private
 * @returns {Promise}
 */
export const acceptAnswer = curry((pc, sdp) => {
  if (process.env.LOG_SDP) {
    // eslint-disable-next-line no-console
    console.info(`answer`, sdp);
  }
  return pc.setRemoteDescription(new RTCSessionDescription({
    sdp,
    type: `answer`
  }));
});

/**
 * Terminates the specified RTCPeerConnection
 * @param {RTCPeerConnection} pc
 * @private
 * @returns {undefined}
 */
export const end = curry((pc) => {
  if (pc.signalingState !== `closed`) {
    endAllStreams(pc);
    pc.close();
  }
});

/**
 * returns the direction line for the specified media type.
 * @param {string} type
 * @param {RTCPeerConnection} pc
 * @private
 * @returns {string}
 */
export function mediaDirection(type, pc) {
  if (pc.connectionState === `closed` || pc.signalingState === `closed`) {
    return `inactive`;
  }

  if (!pc.localDescription) {
    return `inactive`;
  }
  const sdp = transform.parse(pc.localDescription.sdp);
  const media = find(sdp.media, {type});
  if (!media) {
    return `inactive`;
  }

  if (type === `audio` && media.direction === `sendonly`) {
    const remoteSdp = transform.parse(pc.remoteDescription.sdp);
    const remoteMedia = find(remoteSdp.media, {type});
    if (remoteMedia && remoteMedia.direction === `inactive`) {
      return `inactive`;
    }
  }

  return media.direction;
}

/**
 * Checks a given sdp to ensure it contains an offer for the h264 codec
 * @param {Boolean} wantsVideo
 * @param {String} offer
 * @private
 * @returns {String} returns the offer to simplify use in promise chains
 */
export const ensureH264 = curry((wantsVideo, offer) => {
  if (wantsVideo) {
    if (!offer.includes(`m=video`)) {
      throw new Error(`No video section found in offer`);
    }
    if (!/[hH]264/.test(offer)) {
      throw new Error(`Offer does not include h264 codec`);
    }
  }
  return offer;
});


