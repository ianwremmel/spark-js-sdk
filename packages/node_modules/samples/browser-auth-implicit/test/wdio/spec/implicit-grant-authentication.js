/* eslint-disable no-undef */

import testUsers from '@ciscospark/test-helper-test-users';
import {assert} from 'chai';

describe(`samples/browser-auth-implicit`, () => {
  describe(`authenticate using implicit grant flow`, () => {
    const browserSpock = browser.select(`browserSpock`);
    let spock;

    before(`creates spock`, () => testUsers.create({count: 1, config: {displayName: `Spock`}})
      .then((users) => {
        [spock] = users;
      }));

    step(`browses to sample app and verifies the user is not authenticated`, () => {
      browserSpock.url(`/packages/node_modules/sample-browser-auth-implicit`);
      assert.equal(browserSpock.getText(`#authentication-status`), `Not Authenticated`);
    });

    step(`initiates implicit grant authentication flow`, () => {
      browserSpock.click(`[title="authenticate"]`);
    });

    step(`enters user login information`, () => {
      // Enter Email
      browserSpock.waitForExist(`input[type=email]`);
      browserSpock.setValue(`[placeholder="Email address"]`, spock.email);
      browserSpock.click(`[name="btnOK"]`);

      // Enter Password
      browserSpock.waitForExist(`input[type=password]`);
      browserSpock.setValue(`[placeholder="Password "]`, spock.password);
      browserSpock.click(`[name="Login.Submit"]`);
    });

    step(`verifies authentication was successfull`, () => {
      browserSpock.waitUntil(() => browserSpock.getTitle() === `Authentication - Implicit Grant Flow`);
      assert.equal(browserSpock.getText(`#authentication-status`), `Authenticated`);
      assert.equal(browserSpock.getAttribute(`[title="logout"]`, `value`), `logout`);
    });

    step(`logs out`, () => {
      browserSpock.click(`[title="logout"]`);
      browserSpock.waitUntil(() => browserSpock.getTitle() === `Authentication - Implicit Grant Flow`);
      assert.equal(browserSpock.getText(`#authentication-status`), `Not Authenticated`);
    });
  });
});
